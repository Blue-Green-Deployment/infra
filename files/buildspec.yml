version: 0.2

phases:
  install:
    commands:
      - echo "Bootstrap strict mode"
      - set -eu

      - echo "Installing Sonar Scanner CLI..."
      - SONAR_VER=5.0.1.3006
      - SONAR_ZIP="sonar-scanner-${SONAR_VER}-linux-x64.zip"

      # Try multiple mirrors (binaries.sonarsource.com, then GitHub Releases)
      - |
        set +e
        URLS="
        https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/${SONAR_ZIP}
        https://github.com/SonarSource/sonar-scanner-cli/releases/download/v${SONAR_VER}/${SONAR_ZIP}
        "
        for u in $URLS; do
          echo "Downloading from: $u"
          if curl -L --fail --retry 3 -o "${SONAR_ZIP}" "$u"; then
            echo "Download OK from: $u"
            OK=1
            break
          else
            echo "Failed from: $u"
          fi
        done
        set -e
        [ "${OK:-0}" = "1" ] || { echo "ERROR: could not download ${SONAR_ZIP} from any known URL"; exit 1; }

      - echo "Verifying zip integrity"
      - unzip -t "${SONAR_ZIP}"
      - unzip -q "${SONAR_ZIP}"
      - export SONAR_SCANNER_HOME="$PWD/sonar-scanner-${SONAR_VER}-linux-x64"
      - export PATH="$SONAR_SCANNER_HOME/bin:$PATH"

      - echo "Checking Node"
      - node --version
      - npm --version

  pre_build:
    commands:
      - echo "Login to Amazon ECR"
      - aws --version
      - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
      - AWS_ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
      - aws ecr get-login-password --region "${AWS_REGION}" | docker login --username AWS --password-stdin "${AWS_ECR_REGISTRY}"
      - echo "Compute image tag"
      - COMMIT_SHA=$(echo "${CODEBUILD_RESOLVED_SOURCE_VERSION}" | cut -c1-7)
      - IMAGE_URI="${ECR_REPO}:${COMMIT_SHA}"
      - echo "Install deps + tests (non-fatal)"
      - npm ci
      - CI=true npm test -- --coverage --watchAll=false || true

  build:
    commands:
      - echo "Docker build and push -> ${IMAGE_URI}"
      - docker build -t "${IMAGE_URI}" .
      - docker push "${IMAGE_URI}"
      - echo "SonarQube analysis"
      - sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.login="${SONAR_TOKEN}" -Dsonar.projectKey="${SONAR_PROJECT_KEY}"

  post_build:
    commands:
      - echo "Fetch ECS Execution Role ARN"
      - EXEC_ROLE_ARN=$(aws iam get-role --role-name "${PROJECT_NAME}-ecsTaskExecutionRole" --query 'Role.Arn' --output text)
      - echo "Render taskdef.json"
      - printf '{"family":"%s","networkMode":"awsvpc","executionRoleArn":"%s","requiresCompatibilities":["FARGATE"],"cpu":"%s","memory":"%s","containerDefinitions":[{"name":"app","image":"%s","essential":true,"portMappings":[{"containerPort":%s,"hostPort":%s,"protocol":"tcp"}]}]}\n' "${PROJECT_NAME}" "${EXEC_ROLE_ARN}" "${CPU}" "${MEMORY}" "${IMAGE_URI}" "${CONTAINER_PORT}" "${CONTAINER_PORT}" > taskdef.json
      - echo "Render appspec.json"
      - printf '{"version":1,"Resources":[{"TargetService":{"Type":"AWS::ECS::Service","Properties":{"TaskDefinition":"<TASK_DEFINITION>","LoadBalancerInfo":{"ContainerName":"app","ContainerPort":%s}}}}]}\n' "${CONTAINER_PORT}" > appspec.json

artifacts:
  files:
    - taskdef.json
    - appspec.json
